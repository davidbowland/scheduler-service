AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Scheduling lambda invoked on a cron

Transform:
  - AWS::Serverless-2016-10-31

Parameters:
  Environment:
    Type: String
    Default: prod
    AllowedValues:
      - prod
      - test
    Description: Environment for deploy

Mappings:
  EnvironmentMap:
    prod:
      apiKeyName: emails-ApiAp-yI1gb3pwh6ea
      apiUrl: 'https://emails-queue-api.bowland.link'
      logStreamFunction: log-subscriber
      notificationFrom: do-not-reply@bowland.link
      notificationTarget: scheduler-service-error@bowland.link
      project: scheduler-service
    test:
      apiKeyName: emails-ApiAp-rWlNxvI1TJ8Y
      apiUrl: 'https://emails-queue-api-test.bowland.link'
      logStreamFunction: log-subscriber-test
      notificationFrom: do-not-reply@test.bowland.link
      notificationTarget: scheduler-service-error@test.bowland.link
      project: scheduler-service-test

Resources:
  SchedulerEventService:
    Type: AWS::Serverless::Function
    Properties:
      Architectures:
        - x86_64
      CodeUri: './dist'
      Description: A Lambda to be invoked when a EventBridge event happens, hitting an endpoint to kick off subsequent functionality.
      Environment:
        Variables:
          API_KEY_NAME: !FindInMap [EnvironmentMap, !Ref Environment, apiKeyName]
          API_KEY_URL: !FindInMap [EnvironmentMap, !Ref Environment, apiUrl]
          NOTIFICATION_FROM: !FindInMap [EnvironmentMap, !Ref Environment, notificationFrom]
          NOTIFICATION_TARGET: !FindInMap [EnvironmentMap, !Ref Environment, notificationTarget]
      FunctionName: !FindInMap [EnvironmentMap, !Ref Environment, project]
      Handler: handlers/scheduled-event.scheduledEventHandler
      MemorySize: 128
      Policies:
        - Statement:
            - Sid: GetApiKeyPolicy
              Effect: Allow
              Action:
                - apigateway:GET
              Resource:
                - '*'
      Runtime: nodejs14.x
      Timeout: 15

  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: [SchedulerEventService]
    Properties:
      LogGroupName: !Sub /aws/lambda/${SchedulerEventService}
      RetentionInDays: 30

  LambdaLogGroupSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Sub
        - 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Function}'
        - Function: !FindInMap [EnvironmentMap, !Ref Environment, logStreamFunction]
      FilterPattern: '[timestamp, uuid, level="ERROR", message]'
      LogGroupName: !Ref LambdaLogGroup
