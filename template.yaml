AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Scheduling lambda invoked on a cron

Transform:
  - AWS::Serverless-2016-10-31

Parameters:
  Environment:
    Type: String
    Default: prod
    AllowedValues:
      - prod
      - test
    Description: Environment for deploy

Mappings:
  EnvironmentMap:
    prod:
      logStreamFunction: log-subscriber
      project: scheduler-service
    test:
      logStreamFunction: log-subscriber-test
      project: scheduler-service-test

Resources:
  SchedulerEventService:
    Type: AWS::Serverless::Function
    Properties:
      Architectures:
        - x86_64
      CodeUri: './dist'
      Description: A Lambda to be invoked when a EventBridge event happens, hitting an endpoint to kick off subsequent functionality.
      FunctionName: !FindInMap [EnvironmentMap, !Ref Environment, project]
      Handler: handlers/scheduled-event.scheduledEventHandler
      MemorySize: 128
      Policies:
        - Statement:
            - Sid: GetApiKeyPolicy
              Effect: Allow
              Action:
                - apigateway:GET
              Resource:
                - '*'
      Runtime: nodejs16.x
      Tags:
        'created-by': 'scheduler-service'
        'created-for': 'dbowland'
        'environment': !Ref Environment
      Timeout: 15

  SchedulerLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Sub '${SchedulerEventService.Arn}'
      Principal: events.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub 'arn:aws:events:${AWS::Region}:${AWS::AccountId}:rule/*'

  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: [SchedulerEventService]
    Properties:
      LogGroupName: !Sub /aws/lambda/${SchedulerEventService}
      RetentionInDays: 30
      Tags:
        - Key: 'created-by'
          Value: 'scheduler-service'
        - Key: 'created-for'
          Value: 'dbowland'
        - Key: 'environment'
          Value: !Ref Environment

  LambdaLogGroupSubscription:
    Type: AWS::Logs::SubscriptionFilter
    Properties:
      DestinationArn: !Sub
        - 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${Function}'
        - Function: !FindInMap [EnvironmentMap, !Ref Environment, logStreamFunction]
      FilterPattern: '[timestamp, uuid, level="ERROR", message]'
      LogGroupName: !Ref LambdaLogGroup
